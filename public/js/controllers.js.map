{"version":3,"sources":["userController.js","editController.js","showController.js","commentController.js","postController.js","adminController.js"],"names":[],"mappingslTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"controllers.js","sourcesContent":["synco.controller('userController', ['$scope', '$http', '$location', 'userModel', 'apiModel', function($scope, $http, $location, userModel, apiModel) {\n\t\n\t$scope.API_URL = \"http://www.synco.xyz/api/v1/\";\n\n\t$scope.posts = null;\n\n\t$scope.whichPost = null;\n\n\t$scope.postForm = false;\n\n\t//Get Posts Method\n\n\t$scope.checkAuth = function() {\n\t\t//console.log(userModel.getAuthStatus());\n\t\treturn userModel.getAuthStatus();\n\t}\n\n\t$scope.loadVotes = function() {\n\t\t$http.get($scope.API_URL + \"votes/\" + userModel.getId())\n\t\t.success(function(response) {\n\t\t\t$scope.voteTable = response;\n\t\t});\n\t};\n\n\t$scope.checkUpvote = function(postId) {\n\t\tfor (var votes in $scope.voteTable)\n\t\t{\n\t\t\tif (votes.v_pid == postId)\n\t\t\t{\n\t\t\t\tif (votes.upvotes > 1)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t$scope.loadData = function() {\n\t\t$http.get($scope.API_URL + \"posts\")\n\t\t\t.success(function(response){\n\t\t\t\t$scope.posts = response;\n\t\t\t});\n\t\t\n\t\tif ($scope.checkAuth())\n\t\t{\n\t\t\t//alert(\"authorized.\");\n\t\t\t$scope.loadVotes();\n\t\t\tconsole.log(\"Votes loaded for user.\");\n\t\t}\n\t};\n\n\t//inital load\n\t$scope.loadData();\n\n\t//Check if logged in, if so we will load vote data.\n\n\n\t//Delete Post\n\n\t$scope.confirmDelete = function(id) {\n\n\t\tif (userModel.getAuthStatus())\n\t\t{\t\n\t\t\tvar isConfirmDelete = confirm('Are you sure you want to delete?');\n\t\t\tif (isConfirmDelete) {\n\t\t\t\t$http({\n\t\t\t\t\tmethod: 'DELETE',\n\t\t\t\t\turl: $scope.API_URL + 'posts/' + id\n\t\t\t\t}).\n\t\t\t\t\tsuccess(function(data) {\n\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t}).\n\t\t\t\t\terror(function(data) {\n\t\t\t\t\t\talert('Unable to delete.');\n\t\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t//Load edit post page\n\t\n\t$scope.editPost = function(id) \n\t{\n\t\tconsole.log('viewPost' + id);\n\n\t\t$location.path('/post/' + id );\n\t\t\n\t}\n\n\t$scope.showPostForm = function() \n\t{\n\t\treturn $scope.postForm;\n\t\tconsole.log($scope.postForm);\n\t\t\n\t}\n\n\t/*\n\t//Autofill login for testing\n\tangular.extend($scope, {\n\t\tlogin: {\n\t\t\temail: 'syncoserver@gmail.com',\n\t\t\tpassword: 'syncosyncosynco'\n\t\t}\n\t});\n\t*/\n\n\t//Submit login attempt\n\n\tangular.extend($scope, {\n\t\tdoLogin: function(loginForm) \n\t\t{\n\t\t\tvar data = {\n\t\t\t\t\temail: $scope.login.email,\n\t\t\t\t\tpassword: $scope.login.password\n\t\t\t\t}\n\t\t\tuserModel.doLogin(data).then(function() {\n\t\t\t\t$location.path('/');\n\t\t\t});\n\t\t},\n\t\tdoLogout: function() {\n\t\t\tuserModel.doUserLogout();\n\t\t\t$location.path('/');\n\t\t},\n\t\tdoRegister: function(registerForm) {\n\t\t\tconsole.log($scope.login.password);\n\t\t\tconsole.log($scope.login.password2);\n\t\t\tif($scope.login.password == $scope.login.password2)\n\t\t\t{\n\t\t\t\tvar data = {\n\t\t\t\t\temail: $scope.login.email,\n\t\t\t\t\tname: $scope.login.username,\n\t\t\t\t\tpassword: $scope.login.password,\n\t\t\t\t\tpassword_confirmation: $scope.login.password2\n\t\t\t\t}\n\n\t\t\t\tuserModel.register(data).then(function() {\n\t\t\t\t//\talert(\"hi\");\n\t\t\t\t//alert(sessionStorage.auth);\n\t\t\t\t//alert(sessionStorage.userName);\n\t\t\t\t//alert(sessionStorage.id);\n\t\t\t\t//console.log(sessionStorage.userName);\n\t\t\t\t//console.log(sessionStorage.auth);\n\t\t\t\t//console.log(sessionStorage.id);\n\t\t\t\t\t$location.path('/');\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\talert(\"Your password fields do not match\");\n\t\t\t}\n\t\t}\n\t});\n\n\t//Submit make post request\n\n\tangular.extend($scope, {\n\tmakePost: function() {\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"posts\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttitle: $scope.postTitle,\n\t\t\t\tptext: $scope.postText,\n\t\t\t\tname: userModel.getUserName(),\n\t\t\t\tuid: userModel.getId()\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(\"post created, redirecting to home\");\n\t\t\t//$location.path('/');\n\t\t\t//$scope.postForm=false;\n\t\t\t$scope.loadData();\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(data);\n\t\t\talert(\"Error Making Post - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\n\tangular.extend($scope, {\n\tupVote: function(id) {\n\t\t//alert(id);\n\t\t//alert(userModel.getId());\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"votes\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\tv_pid: id,\n\t\t\t\tvotescore: 1,\n\t\t\t\tuid: userModel.getId()\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tif(response) {\n\t\t\t\tconsole.log(response);\n\t\t\t\talert(response);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//console.log(apiModel.getPostData());\n\t\t\t\tconsole.log(\"vote created, redirecting to home\");\n\t\t\t\t$scope.loadData();\n\t\t\t}\n\t\t\t\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(\"error\");\n\t\t\talert(\"Error Making Vote - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\n\tangular.extend($scope, {\n\tdownVote: function(id) {\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"votes\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\tv_pid: id,\n\t\t\t\tvotescore: -1,\n\t\t\t\tuid: userModel.getId()\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tif(response) {\n\t\t\t\tconsole.log(response);\n\t\t\t\talert(response);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"vote created, redirecting to home\");\n\t\t\t\t$scope.loadData();\n\n\t\t\t}\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(\"error\");\n\t\t\talert(\"Error Making Vote - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\n\t//Load the show_post page\n\n\tangular.extend($scope, {\n\tviewPost: function(id) {\n\n\t\t$location.path('/view/' + id );\n\t}\t\n\t});\n\n\tangular.extend($scope, {\n\tnewPost: function() {\n\t\t$location.path('/post');\n\t}\t\n\t});\n\n\t\n\t\n\tangular.extend($scope, {\n\t\tcheckOwner: function(id) {\n\t\t\treturn userModel.isUsersPost(id);\n\t\t}\n\t});\n\tangular.extend($scope, {\n\t\tgetUser: function() {\n\t\t\treturn userModel.getUserName();\n\t\t}\n\t});\n\tangular.extend($scope, {\n\t\tcheckUpvotes: function(post) {\n\t\t\tif(userModel.getAuthStatus()) \n\t\t\t{\n\t\t\t\treturn userModel.hasUpvoted(post);\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t}\n\t});\n}]);\n\n/*\nsynco.filter('byScore', function() {\n return function(items) {  \n    items.sort(function(a,b){   \n        if (parseInt(a[0].about.post_score) > parseInt(b[0].about.post_score)\n            return 1;\n        if (parseInt(a[0].about.post_score) < parseInt(b[0].about.post_score)\n            return -1;         \n        return 0; })\n});\n*/","synco.controller('editController', ['$scope', '$http', '$location', '$routeParams', function($scope, $http, $location, $routeParams) {\n\n\t\t//Get route params for post id\n\t\t$scope.id = $routeParams.id;\n\n\t\t//Pull data for given post id\n\t\t$http.get(baseUrl + api + \"posts/\" + $scope.id )\n\t\t.success(function(response){\n\t\t\t$scope.post= response;\n\t\t}).error(function(response) {\n\t\t\talert(\"error getting your json\");\n\t\t});\n\n\t\t//Function for editing the post that was pulled - use the current value as ng-model of form so that it \n\t\t//autopopulates with current data\n\t\tangular.extend($scope, {\n\t\teditPost: function(editForm) {\n\t\t//alert($scope.post[0].about.title + \" , \" + $scope.post[0].about.ptext);\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"posts/\" + $scope.id,\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttitle: $scope.post[0].title,\n\t\t\t\tptext: $scope.post[0].ptext\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(\"post created, redirecting to home\");\n\t\t\t$location.path('/');\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(data);\n\t\t\talert(\"Error Making Post - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\t\n\n}]);","synco.controller('showController', ['$scope', '$http', '$location', '$routeParams', 'userModel', function($scope, $http, $location, $routeParams, userModel) {\n\n\t\t//load in route param for post id\n\t\t$scope.id = $routeParams.id;\n\n\t\t//Pull data for given post id\n\t\t$http.get(baseUrl + api + \"posts/\" + $scope.id )\n\t\t.success(function(response){\n\t\t\t$scope.post= response;\n\t\t}).error(function(response) {\n\t\t\talert(\"error getting your json\");\n\t\t});\n\n\n\t\t//Pull comments for given post id\n\t\t$http.get(baseUrl + api + \"comments/\" + $scope.id)\n\t\t.success(function(response){\n\t\t\t$scope.comments= response;\n\t\t\t\n\t\t}).error(function(response) {\n\t\t\talert(\"error getting your json\");\n\t\t});\n\n\t\t/*\n\t\t//Load add comment page\n\t\t$scope.addComment = function(id) \n\t\t{\n\t\t\tconsole.log('comment' + id);\n\n\t\t\t$location.path('/comment/' + id );\n\t\t\t\n\t\t}\n\t\t*/\n\t\tangular.extend($scope, {\n\t\t\tcheckAuth: function() {\n\t\t\t\t//console.log(userModel.getAuthStatus());\n\t\t\t\treturn userModel.getAuthStatus();\n\t\t\t}\n\t\t});\n\n\t\tangular.extend($scope, {\n\t\tmakeComment: function(commentForm) {\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"comments\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\tctext: $scope.post.ctext,\n\t\t\t\tc_pid: $scope.id,\n\t\t\t\tname: userModel.getUserName()\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(\"comment created, redirecting to home\");\n\t\t\tlocation.reload();\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(data);\n\t\t\talert(\"Error Making Post - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\t\n\n}]);","synco.controller('commentController', ['$scope', '$http', '$location', '$routeParams', function($scope, $http, $location, $routeParams) {\n\n\t//get route param for post id, so we know what post is being commented on\n\t$scope.id = $routeParams.id;\n\t\n\t//function for making the post request\n\tangular.extend($scope, {\n\tmakeComment: function(commentForm) {\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"comments\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\tctext: $scope.post.ctext,\n\t\t\t\tc_pid: $scope.id\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(\"comment created, redirecting to home\");\n\t\t\t$location.path('/view/' + $scope.id);\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(data);\n\t\t\talert(\"Error Making Post - Make sure form is filled.\");\n\t\t});\n\t}\n\t});\n\n\n}]);","synco.controller('postController', ['$scope', '$http', '$location', 'userModel', function($scope, $http, $location, userModel) {\n\t$scope.post = {};\n\t\n\t\n\t$scope.makePost = function()\n\t{\n\n\t\t\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + api + \"posts\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttitle: $scope.post.title,\n\t\t\t\tptext: $scope.post.ptext,\n\t\t\t\tname: userModel.getUserName(),\n\t\t\t\tuid: userModel.getId()\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(\"post created, redirecting to home\");\n\t\t\t$location.path('/');\n\t\t\t\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(status);\n\t\t\tconsole.log(data);\n\t\t\tconsole.log(headers);\n\t\t\t\n\t\t\tif(status==429)\n\t\t\t{\n\t\t\t\t//alert(\"Too many API hits, throttle limit hit.\")\n\t\t\t\tconsole.log(data);\n\t\t\t\tvar json = 'http://ipv4.myexternalip.com/json';\n\t\t\t\t$http.get(json).then(function(result) {\n\t\t\t\t    console.log(result.data.ip)\n\t\t\t\t    alert(\"You have hit the API's post limit. Your ip address has been logged: \" + result.data.ip);\n\t\t\t\t});\n\n\t\t\t}\n\t\t\telse{\n\t\t\talert(\"Error Making Post - Make sure form is filled.\");\n\t\t\t}\n\t\t});\n\t\t\n\t}\n\t\n}]);","synco.controller('adminController', ['$scope', '$http', '$location', '$routeParams', 'userModel', function($scope, $http, $location, $routeParams, userModel) \n{\n\t$scope.user = {};\n\t\n\t\n\t$scope.deleteFromUser = function()\n\t{\n\n\t\t\n\t\t$http({\t\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\turl: baseUrl + \"admin/posts\",\n\t\t\tmethod: \"DELETE\",\n\t\t\tdata: {\n\t\t\t\tuid: $scope.user.toDelete\n\t\t\t}\n\t\t}).success(function(response) {\n\t\t\tconsole.log(response + \" posts deleted\");\n\t\t\t$location.path('/');\n\t\t}).error(function(data,status,headers) {\n\t\t\tconsole.log(data);\n\t\t\talert(\"Error deleting posts\");\n\t\t});\n\t\t\n\t}\n\n\n\n}]);\n"],"sourceRoot":"/source/"}